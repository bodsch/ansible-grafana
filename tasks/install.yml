---

- name: detect binary file for grafana
  become: false
  delegate_to: "{{ grafana_delegate_to }}"
  stat:
    path: "{{ grafana_install_path }}/bin/grafana"
  register: stat_file_binary

- block:
    - name: create remote temp directory
      file:
        path: "{{ grafana_remote_tmp_directory }}"
        state: directory
        mode: 0755
      when:
        - not grafana_direct_download

    - name: propagate grafana archive
      copy:
        src: "{{ grafana_local_tmp_directory }}/{{ grafana_download_file }}"
        dest: "{{ grafana_remote_tmp_directory }}"
        mode: 0755
        owner: "{{ grafana_system_user }}"
        group: "{{ grafana_system_group }}"
        remote_src: "{{ 'true' if grafana_direct_download else 'false' }}"

    - name: extract grafana archive
      become: true
      unarchive:
        src: "{{ grafana_remote_tmp_directory }}/{{ grafana_download_file }}"
        dest: "{{ grafana_install_path }}"
        copy: false
        extra_opts:
          - --strip-components=1
      register: _extract_archive

  when:
    - not stat_file_binary.stat.exists

- name: create link to working directory
  file:
    state: link
    src: "{{ grafana_install_path }}"
    dest: "{{ grafana_share_dir }}"
    force: true
    follow: false

- name: propagate grafana provisioning plugins
  block:
    - name: create plugins directory for installed version
      file:
        state: directory
        path: /etc/grafana
        group: "{{ grafana_system_group }}"
        mode: 0775

    - name: create link to provisioning
      file:
        state: link
        src: "{{ grafana_install_path }}/conf/provisioning"
        dest: /etc/grafana/provisioning
        force: true
        follow: false
      notify:
        - reload grafana

- name: create link to binaries
  file:
    src: "{{ grafana_install_path }}/bin/{{ item }}"
    dest: "/usr/sbin/{{ item }}"
    state: link
    force: true
    follow: false
  loop:
    - grafana-cli
    - grafana-server
  notify:
    - restart grafana

- name: create local facts
  template:
    src: ansible_facts.j2
    dest: /etc/ansible/facts.d/grafana.fact
    mode: 0755

- name: create grafana lib directory
  file:
    state: directory
    path: "{{ grafana_data_dir }}"
    group: "{{ grafana_system_group }}"
    mode: 0775

- name: create grafana log directory
  file:
    state: directory
    path: "{{ grafana_log_dir }}"
    mode: 0755

- name: systemd
  block:
    - name: create systemd service unit
      template:
        src: "init/systemd/grafana-server.service.j2"
        dest: "{{ systemd_lib_directory }}/grafana-server.service"
        owner: root
        group: root
        mode: 0644
      notify:
        - daemon-reload
        - restart grafana

    - name: create grafana run configuration
      template:
        src: "grafana-server.j2"
        dest: "{{ grafana_defaults_directory }}/grafana-server"
        force: true
        owner: root
        group: "{{ grafana_system_group }}"
        mode: 0644
      notify:
        - validate config
        - reload grafana
  when:
    - ansible_service_mgr | lower == "systemd"

# - name: openrc
#   block:
#     - name: create openrc service configuration
#       template:
#         src: "init/openrc/conf.d/grafana.j2"
#         dest: "/etc/conf.d/grafana"
#         owner: root
#         group: root
#         mode: 0644
#
#     - name: create openrc init configuration
#       template:
#         src: "init/openrc/init.d/grafana.j2"
#         dest: "/etc/init.d/grafana"
#         owner: root
#         group: root
#         mode: 0750
#   when:
#     - ansible_service_mgr | lower == "openrc"

...
