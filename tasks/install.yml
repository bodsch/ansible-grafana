---

- name: detect binary file for grafana
  become: false
  delegate_to: "{{ grafana_delegate_to }}"
  run_once: "{{ 'false' if grafana_direct_download else 'true' }}"
  stat:
    path: "{{ grafana_install_path }}/bin/grafana-server"
  register: stat_file_binary

- name: handle remote binaries
  when:
    - not stat_file_binary.stat.exists
    - not stat_grafana_binary.stat.exists
  block:
    - name: create remote temp directory
      file:
        path: "{{ grafana_remote_tmp_directory }}"
        state: directory
        mode: 0755
      when:
        - not grafana_direct_download

    - name: propagate grafana archive
      copy:
        src: "{{ grafana_local_tmp_directory }}/{{ grafana_download_file }}"
        dest: "{{ grafana_remote_tmp_directory }}"
        mode: 0755
        owner: "{{ grafana_system_user }}"
        group: "{{ grafana_system_group }}"
        remote_src: "{{ 'true' if grafana_direct_download else 'false' }}"

    - name: extract grafana archive
      become: true
      unarchive:
        src: "{{ grafana_remote_tmp_directory }}/{{ grafana_download_file }}"
        dest: "{{ grafana_install_path }}"
        copy: false
        extra_opts:
          - --strip-components=1
      register: _extract_archive

- name: create link to working directory
  file:
    state: link
    src: "{{ grafana_install_path }}"
    dest: "{{ grafana_share_dir }}"
    force: true
    follow: false
  notify:
    - restart grafana

- name: create config directory
  file:
    state: directory
    path: /etc/grafana
    group: "{{ grafana_system_group }}"
    mode: 0755

- name: find grafana provisioning plugins
  stat:
    path: /etc/grafana/provisioning
    get_checksum: false
  register: _grafana_provisioning
  ignore_errors: true

- name: copy sample provisioning configurations
  copy:
    src: "{{ grafana_install_path }}/conf/provisioning"
    dest: /etc/grafana/provisioning
    owner: root
    group: "{{ grafana_system_group }}"
    mode: 0755
    force: true
    remote_src: true
  notify:
    - reload grafana
  when:
    - _grafana_provisioning is defined
    - _grafana_provisioning.stat is defined
    - not _grafana_provisioning.stat.exists | default('false')
    # - not _grafana_provisioning.stat.isdir | default('false')

- name: create link to binaries
  file:
    src: "{{ grafana_install_path }}/bin/{{ item }}"
    dest: "/usr/sbin/{{ item }}"
    state: link
    force: true
    follow: false
  loop:
    - grafana-cli
    - grafana-server
  notify:
    - restart grafana

- name: create local facts
  template:
    src: ansible_facts.j2
    dest: /etc/ansible/facts.d/grafana.fact
    mode: 0755

- name: create grafana lib directory
  file:
    state: directory
    path: "{{ grafana_data_dir }}/{{ item }}"
    owner: "{{ grafana_system_user }}"
    group: "{{ grafana_system_group }}"
    mode: 0775
  loop:
    - alerting
    - csv
    - dashboards
    - plugins
    - png
    - sessions
    - storage

- name: create grafana log directory
  file:
    state: directory
    path: "{{ grafana_log_dir }}"
    mode: 0755

- name: systemd
  when:
    - ansible_service_mgr | lower == "systemd"
  block:
    - name: create systemd service unit
      template:
        src: "init/systemd/grafana-server.service.j2"
        dest: "{{ systemd_lib_directory }}/grafana-server.service"
        owner: root
        group: root
        mode: 0644
      notify:
        - daemon-reload
        - restart grafana

    - name: create grafana run configuration
      template:
        src: "grafana-server.j2"
        dest: "{{ grafana_defaults_directory }}/grafana-server"
        force: true
        owner: root
        group: "{{ grafana_system_group }}"
        mode: 0644
      notify:
        - validate config
        - reload grafana

- name: openrc
  when:
    - ansible_service_mgr | lower == "openrc"
  block:
    - name: create openrc service configuration
      template:
        src: "init/openrc/conf.d/grafana-server.j2"
        dest: "/etc/conf.d/grafana-server"
        owner: root
        group: root
        mode: 0644

    - name: create openrc init configuration
      template:
        src: "init/openrc/init.d/grafana-server.j2"
        dest: "/etc/init.d/grafana-server"
        owner: root
        group: root
        mode: 0750

- name: python support
  when:
    - grafana_python_packages is defined
    - grafana_python_packages | length > 0
  block:
    - name: create requirements.txt
      template:
        src: requirements.txt.j2
        dest: /tmp/grafana-requirements.txt
        mode: 0660

    - name: ensure python bindings for grafana packages 1st
      pip:
        requirements: /tmp/grafana-requirements.txt
        state: present
        executable: pip3
      register: pip_install

...
